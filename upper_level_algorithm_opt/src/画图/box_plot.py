import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd

data = {
    "data-0": {
        "CUDA": [ 0.170349, 0.009401, 0.009754, 0.009457, 0.009489],
        "GENERAL":[8.58364, 8.70052, 8.60907, 8.52806, 8.498],
        "MPI+CUDA":[0.179473 ],
        "MPI+OPENMP":[0.290053],
        "OPENBLAS":[0.299166, 0.161532, 0.193564, 0.163827, 0.870807],
        "MPI": [2.28697],
        "OpenMP": [1.26296, 0.912826, 0.864024, 1.37319, 0.859622]
    },
    "data-1": {
        "CUDA": [0.011676, 0.009463, 0.009469, 0.009381, 0.009494],
        "GENERAL":[9.37323, 9.48582, 9.35061, 9.20979, 8.88446],
        "MPI+CUDA":[0.015195],
        "MPI+OPENMP":[0.271809],
        "OPENBLAS":[0.462857, 0.200399, 0.193867, 0.274859, 0.493931],
        "MPI": [2.63426],
        "OpenMP": [0.926561, 0.897279, 0.871753, 1.32329, 0.90172]
    },
    "data-2":{
        "CUDA":[0.009652, 0.009448, 0.009404, 0.009498, 0.009514],
        "GENERAL":[9.21417, 9.44949, 9.38601, 9.57344, 9.91514],
        "MPI+CUDA":[0.013287],
        "MPI+OPENMP":[0.277888],
        "OPENBLAS":[0.389157, 0.272846, 0.193299, 0.177911, 0.499403],
        "MPI": [2.42766],
        "OpenMP": [1.08802, 0.844306, 1.14846, 1.3041, 0.926556]
    },
    "data-3":{
        "CUDA":[ 0.009405, 0.009485, 0.009509, 0.009427, 0.009508],
        "GENERAL":[8.58296, 8.77495, 8.5656, 8.56401, 8.65181],
        "MPI+CUDA":[0.014491],
        "MPI+OPENMP":[0.267416],
        "OPENBLAS":[0.368921, 0.152424, 0.195769, 0.186789, 0.813275],
        "MPI": [2.16149],
        "OpenMP": [1.40837, 0.877081, 1.11328, 1.31871, 0.926921]
    },
    "data-4":{
        "CUDA":[0.009493, 0.010341, 0.009505, 0.009505, 0.00941],
        "GENERAL":[10.1506, 10.2073, 10.1339, 10.1146, 10.221],
        "MPI+CUDA":[0.013254],
        "MPI+OPENMP":[0.269874 ],
        "OPENBLAS":[0.178972, 0.364956, 0.212412, 0.195401, 0.39016],
        "MPI": [2.56671],
        "OpenMP": [1.38957, 0.878726, 0.922179, 1.08701, 0.94579]
    },
    "data-5":{
        "CUDA":[0.009571, 0.011163, 0.009509, 0.00951, 0.009459],
        "GENERAL":[8.48489, 8.72363, 8.51607, 8.52073, 8.5842],
        "MPI+CUDA":[0.013237],
        "MPI+OPENMP":[0.270132],
        "OPENBLAS":[0.260078, 0.258456, 0.155967, 0.299373, 0.679342],
        "MPI": [2.21115],
        "OpenMP": [1.32109, 0.863694, 1.05314, 0.855152, 0.834426]
    },
    "data-6":{
        "CUDA":[0.009472, 0.010255, 0.009407, 0.009558, 0.010672],
        "GENERAL":[8.9233, 9.4333, 9.38134, 9.11501, 9.23444],
        "MPI+CUDA":[0.01362],
        "MPI+OPENMP":[0.267605],
        "OPENBLAS":[0.258382, 0.261587, 0.172682, 0.370797, 0.389648],
        "MPI": [2.6583],
        "OpenMP": [1.37083, 0.880173, 1.05523, 0.889447, 0.932301]
    },
    "data-7":{
        "CUDA":[0.009691, 0.010974, 0.009483, 0.015276, 0.009503],
        "GENERAL":[9.76064, 9.2257, 9.27661, 9.55173, 9.45328],
        "MPI+CUDA":[0.016437],
        "MPI+OPENMP":[0.271381],
        "OPENBLAS":[0.141758, 0.178392, 0.188324, 0.272058, 0.281524],
        "MPI": [2.18789],
        "OpenMP": [1.13204, 0.864512, 1.11534, 0.861263, 0.85691]
    },
    "data-8":{
        "CUDA":[0.009456, 0.010507, 0.009481, 0.009536, 0.028773],
        "GENERAL":[8.53982, 8.61855, 8.55953, 8.67025, 8.72224],
        "MPI+CUDA":[0.013993],
        "MPI+OPENMP":[0.278712],
        "OPENBLAS":[0.168209, 0.376503, 0.196583, 0.17384, 0.186284],
        "MPI": [2.31069],
        "OpenMP": [0.942522, 0.870841, 0.943717, 0.862633, 0.845201]
    },
    "data-9":{
        "CUDA":[0.00944, 0.009511, 0.009467, 0.009539, 0.009479],
        "GENERAL":[10.1649, 10.1414, 10.1693, 10.1344, 10.2996],
        "MPI+CUDA":[0.013784],
        "MPI+OPENMP":[0.267809],
        "OPENBLAS":[0.156694, 0.473509, 0.178568, 0.240042, 0.278978],
        "MPI": [2.17747],
        "OpenMP": [1.00544, 0.893639, 1.13433, 0.879628, 1.10981]
    }
    # 可以继续添加其他矩阵的数据
}

# data = {
#     "data-0": {
#         "CUDA": [ 0.170349, 0.009401, 0.009754, 0.009457, 0.009489],
#         "MPI+CUDA":[0.179473 ],
#         "MPI+OPENMP":[0.290053],
#         "OPENBLAS":[0.299166, 0.161532, 0.193564, 0.163827, 0.870807],
#         "MPI": [2.28697],
#         "OpenMP": [1.26296, 0.912826, 0.864024, 1.37319, 0.859622]
#     },
#     "data-1": {
#         "CUDA": [0.011676, 0.009463, 0.009469, 0.009381, 0.009494],
#         "MPI+CUDA":[0.015195],
#         "MPI+OPENMP":[0.271809],
#         "OPENBLAS":[0.462857, 0.200399, 0.193867, 0.274859, 0.493931],
#         "MPI": [2.63426],
#         "OpenMP": [0.926561, 0.897279, 0.871753, 1.32329, 0.90172]
#     },
#     "data-2":{
#         "CUDA":[0.009652, 0.009448, 0.009404, 0.009498, 0.009514],
#         "MPI+CUDA":[0.013287],
#         "MPI+OPENMP":[0.277888],
#         "OPENBLAS":[0.389157, 0.272846, 0.193299, 0.177911, 0.499403],
#         "MPI": [2.42766],
#         "OpenMP": [1.08802, 0.844306, 1.14846, 1.3041, 0.926556]
#     },
#     "data-3":{
#         "CUDA":[ 0.009405, 0.009485, 0.009509, 0.009427, 0.009508],
#         "MPI+CUDA":[0.014491],
#         "MPI+OPENMP":[0.267416],
#         "OPENBLAS":[0.368921, 0.152424, 0.195769, 0.186789, 0.813275],
#         "MPI": [2.16149],
#         "OpenMP": [1.40837, 0.877081, 1.11328, 1.31871, 0.926921]
#     },
#     "data-4":{
#         "CUDA":[0.009493, 0.010341, 0.009505, 0.009505, 0.00941],
#         "MPI+CUDA":[0.013254],
#         "MPI+OPENMP":[0.269874 ],
#         "OPENBLAS":[0.178972, 0.364956, 0.212412, 0.195401, 0.39016],
#         "MPI": [2.56671],
#         "OpenMP": [1.38957, 0.878726, 0.922179, 1.08701, 0.94579]
#     },
#     "data-5":{
#         "CUDA":[0.009571, 0.011163, 0.009509, 0.00951, 0.009459],
#         "MPI+CUDA":[0.013237],
#         "MPI+OPENMP":[0.270132],
#         "OPENBLAS":[0.260078, 0.258456, 0.155967, 0.299373, 0.679342],
#         "MPI": [2.21115],
#         "OpenMP": [1.32109, 0.863694, 1.05314, 0.855152, 0.834426]
#     },
#     "data-6":{
#         "CUDA":[0.009472, 0.010255, 0.009407, 0.009558, 0.010672],
#         "MPI+CUDA":[0.01362],
#         "MPI+OPENMP":[0.267605],
#         "OPENBLAS":[0.258382, 0.261587, 0.172682, 0.370797, 0.389648],
#         "MPI": [2.6583],
#         "OpenMP": [1.37083, 0.880173, 1.05523, 0.889447, 0.932301]
#     },
#     "data-7":{
#         "CUDA":[0.009691, 0.010974, 0.009483, 0.015276, 0.009503],
#         "MPI+CUDA":[0.016437],
#         "MPI+OPENMP":[0.271381],
#         "OPENBLAS":[0.141758, 0.178392, 0.188324, 0.272058, 0.281524],
#         "MPI": [2.18789],
#         "OpenMP": [1.13204, 0.864512, 1.11534, 0.861263, 0.85691]
#     },
#     "data-8":{
#         "CUDA":[0.009456, 0.010507, 0.009481, 0.009536, 0.028773],
#         "MPI+CUDA":[0.013993],
#         "MPI+OPENMP":[0.278712],
#         "OPENBLAS":[0.168209, 0.376503, 0.196583, 0.17384, 0.186284],
#         "MPI": [2.31069],
#         "OpenMP": [0.942522, 0.870841, 0.943717, 0.862633, 0.845201]
#     },
#     "data-9":{
#         "CUDA":[0.00944, 0.009511, 0.009467, 0.009539, 0.009479],
#         "MPI+CUDA":[0.013784],
#         "MPI+OPENMP":[0.267809],
#         "OPENBLAS":[0.156694, 0.473509, 0.178568, 0.240042, 0.278978],
#         "MPI": [2.17747],
#         "OpenMP": [1.00544, 0.893639, 1.13433, 0.879628, 1.10981]
#     }
#     # 可以继续添加其他矩阵的数据
# }

# 将数据转换为DataFrame格式
df = pd.DataFrame(columns=["Matrix", "Program", "Time"])

# 使用concat代替append
for matrix, programs in data.items():
    temp_df = pd.DataFrame(columns=["Matrix", "Program", "Time"])
    for program, times in programs.items():
        temp_df = pd.concat([temp_df, pd.DataFrame({"Matrix": [matrix]*len(times), "Program": [program]*len(times), "Time": times})], ignore_index=True)
    df = pd.concat([df, temp_df], ignore_index=True)

# 绘制箱线图
plt.figure(figsize=(10, 6))
sns.boxplot(x="Matrix", y="Time", hue="Program", data=df)
# 自定义纵坐标刻度格式
def formatter(x, pos):
    # 这里可以通过缩放或者设置科学计数法来控制单位
    return f"{x*1000:.1f} ms"  # 将单位改为毫秒
# 图表美化
plt.title("Execution Time Distribution for Different Programs on Matrices")
plt.xlabel("Matrix")
# plt.ylabel("Execution Time (ms)")
plt.ylabel("Execution Time (seconds)")
plt.legend(title="Program")
plt.grid(True, axis="y", linestyle="--", alpha=0.7)

# 保存图像到当前目录
plt.savefig("matrix_program_boxplot.png",dpi=300)

# 显示图像
plt.tight_layout()
plt.show()
